#pragma checksum "C:\Study\DotNet\DotNetProject\Simon\Pages\LeaderBoard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0d029fc672074d31408156c901fbed1054e2263d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Simon.Pages.Pages_LeaderBoard), @"mvc.1.0.razor-page", @"/Pages/LeaderBoard.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/LeaderBoard.cshtml", typeof(Simon.Pages.Pages_LeaderBoard), null)]
namespace Simon.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Study\DotNet\DotNetProject\Simon\Pages\_ViewImports.cshtml"
using Simon;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0d029fc672074d31408156c901fbed1054e2263d", @"/Pages/LeaderBoard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d9d0b155feaf298f7286ec5c61cf27e0c4e11746", @"/Pages/_ViewImports.cshtml")]
    public class Pages_LeaderBoard : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Study\DotNet\DotNetProject\Simon\Pages\LeaderBoard.cshtml"
  
    ViewData["Title"] = "Leaderboard";

#line default
#line hidden
            BeginContext(73, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(92, 69, true);
            WriteLiteral("<div id=\"app\">\r\n    <h2 style=\"text-align:left;\">Leaderboard</h2>\r\n\r\n");
            EndContext();
            BeginContext(175, 741, true);
            WriteLiteral(@"    <div class=""panel panel-success"">
        <div class=""panel-heading"">
            <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Easy</h3>
        </div>
        <div class=""panel-body"">
            <!--Show Top 10 Scorers-->
            <table class=""table table-striped"">
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Hi-Score</th>
                </tr>

                <tr v-for=""players in topEasyScorePlayers"">
                    <td>{{players.rank}}</td>
                    <td>{{players.userName}}</td>
                    <td>{{players.score}}</td>
                </tr>
            </table>
        </div>
    </div>

");
            EndContext();
            BeginContext(932, 745, true);
            WriteLiteral(@"    <div class=""panel panel-warning"">
        <div class=""panel-heading"">
            <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Medium</h3>
        </div>
        <div class=""panel-body"">
            <!--Show Top 10 Scorers-->
            <table class=""table table-striped"">
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Hi-Score</th>
                </tr>

                <tr v-for=""players in topMediumScorePlayers"">
                    <td>{{players.rank}}</td>
                    <td>{{players.userName}}</td>
                    <td>{{players.score}}</td>
                </tr>
            </table>
        </div>
    </div>

");
            EndContext();
            BeginContext(1691, 750, true);
            WriteLiteral(@"    <div class=""panel panel-danger"">
        <div class=""panel-heading"">
            <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Hard</h3>
        </div>
        <div class=""panel-body"">
            <!--Show Top 10 Scorers-->
            <table class=""table table-striped"">
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Hi-Score</th>
                </tr>

                <tr v-for=""players in topHardScorePlayers"">
                    <td>{{players.rank}}</td>
                    <td>{{players.userName}}</td>
                    <td>{{players.score}}</td>
                </tr>
            </table>
        </div>
    </div>

</div>

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(2459, 2492, true);
                WriteLiteral(@"
    <script>
        var app = new Vue({
            el: ""#app"",
            data: {
                gameon: false,
                topEasyScorePlayers: [],
                topMediumScorePlayers: [],
                topHardScorePlayers: []
            },
            mounted: function () {
                // PERFORM ANY ACTIONS WHEN THE PAGE LOADS HERE - SIMILAR TO JQUERY DOCUMENT.READY
                this.getTopScorers();
            },
            methods: {
                getTopScorersForEachLevel: function (difficultyLevel) {
                    console.log(""Fetching High Scorers"");
                    var self = this;
                    $.ajax({
                        url: ""api/Users/getTopScorers?difficultyLevel="" + difficultyLevel,
                        dataType: 'json',
                        contentType: 'application/json',
                        method: 'GET'
                    }).done(function (simonResponseDataList, status, xhr) {
                        // process");
                WriteLiteral(@" the response when status code is 200-299
                        console.log(""Fetched Top Scorers"");
                        $.each(simonResponseDataList,
                            function (idx, player) {
                                player.rank = idx + 1;
                            });
                        switch (difficultyLevel) {
                            case 1: self.topEasyScorePlayers = simonResponseDataList;
                                break;
                            case 2: self.topMediumScorePlayers = simonResponseDataList;
                                break;
                            case 3: self.topHardScorePlayers = simonResponseDataList;
                                break;
                            default:
                        }
                    }).fail(function (xhr, status, error) {
                        // deal with error from server (status code 400-599)
                        alert(""There was an error retrieving pattern"");
          ");
                WriteLiteral(@"          });
                },
                getTopScorers: function () {
                    this.getTopScorersForEachLevel(1);
                    this.getTopScorersForEachLevel(2);
                    this.getTopScorersForEachLevel(3)
                }
            },
            computed: {
                // CREATE ANY CALCULATED PROPERTIES HERE. THEY BEHAVE LIKE READ-ONLY DATA
            }
        });

    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RulesModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RulesModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RulesModel>)PageContext?.ViewData;
        public RulesModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
