#pragma checksum "C:\Study\DotNet\DotNetProject\Simon\Pages\GetMyScores.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "07f49c27e7c31d3f205eb9efc43547464a59ab5b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Simon.Pages.Pages_GetMyScores), @"mvc.1.0.razor-page", @"/Pages/GetMyScores.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/GetMyScores.cshtml", typeof(Simon.Pages.Pages_GetMyScores), null)]
namespace Simon.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Study\DotNet\DotNetProject\Simon\Pages\_ViewImports.cshtml"
using Simon;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"07f49c27e7c31d3f205eb9efc43547464a59ab5b", @"/Pages/GetMyScores.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d9d0b155feaf298f7286ec5c61cf27e0c4e11746", @"/Pages/_ViewImports.cshtml")]
    public class Pages_GetMyScores : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Study\DotNet\DotNetProject\Simon\Pages\GetMyScores.cshtml"
  
    ViewData["Title"] = "Previous Scores";

#line default
#line hidden
            BeginContext(95, 578, true);
            WriteLiteral(@"

<div id=""app"">
    <h2 style=""text-align:left;"">Previous Scores</h2>
    <div class=""row"">
        <div class=""col-2""></div>
        <div class=""col-4"">
            <div class=""input-group"">
                <input type=""text"" class=""form-control"" placeholder=""Your Name"" v-model=""userName"">
                <span class=""input-group-btn"">
                    <button class=""btn btn-default"" type=""button"" v-on:click=""getScores()"">Show</button>
                </span>
            </div>
        </div>
        <div class=""col-2""></div>
    </div>
    <br />

");
            EndContext();
            BeginContext(694, 530, true);
            WriteLiteral(@"    <div v-if=""easyScores.length > 0"">
        <div class=""panel panel-success"">
            <div class=""panel-heading"">
                <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Easy</h3>
            </div>
            <div class=""panel-body"">
                <ul class=""list-group"">
                    <li v-for=""score in easyScores"" class=""list-group-item"">
                        {{score}}
                    </li>
                </ul>
            </div>
        </div>
    </div>


");
            EndContext();
            BeginContext(1247, 530, true);
            WriteLiteral(@"    <div v-if=""medScores.length > 0"">
        <div class=""panel panel-warning"">
            <div class=""panel-heading"">
                <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Medium</h3>
            </div>
            <div class=""panel-body"">
                <ul class=""list-group"">
                    <li v-for=""score in medScores"" class=""list-group-item"">
                        {{score}}
                    </li>
                </ul>
            </div>
        </div>
    </div>


");
            EndContext();
            BeginContext(1798, 527, true);
            WriteLiteral(@"    <div v-if=""hardScores.length > 0"">
        <div class=""panel panel-danger"">
            <div class=""panel-heading"">
                <h3 class=""panel-title""><i class=""glyphicon glyphicon-list""></i> Hard</h3>
            </div>
            <div class=""panel-body"">
                <ul class=""list-group"">
                    <li v-for=""score in hardScores"" class=""list-group-item"">
                        {{score}}
                    </li>
                </ul>
            </div>
        </div>
    </div>

");
            EndContext();
            BeginContext(2350, 91, true);
            WriteLiteral("    <div v-if=\"userNotFound\">\r\n        <h3>No scores found</h3>\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(2459, 2940, true);
                WriteLiteral(@"
    <script>
        var app = new Vue({
            el: ""#app"",
            data: {
                userName: """",
                userNotFound: false,
                easyScores: [],
                medScores: [],
                hardScores: []
            },
            mounted: function () {
                // PERFORM ANY ACTIONS WHEN THE PAGE LOADS HERE - SIMILAR TO JQUERY DOCUMENT.READY

            },
            methods: {
                getScoresByDifficulty: function (difficultyLevel) {
                    console.log(""Getting Scores for difficultyLevel:"" + difficultyLevel);
                    var self = this;
                    if (self.userNotFound) {
                        // do not make further api calls
                        return;
                    }
                    $.ajax({
                        url: ""api/Users/GetUserScore?userName="" + self.userName + ""&difficultyLevel="" + difficultyLevel,
                        dataType: 'json',
                    ");
                WriteLiteral(@"    contentType: 'application/json',
                        method: 'GET'
                    }).done(function (userScoresResponse, status, xhr) {
                        // process the response when status code is 200-299
                        switch (difficultyLevel) {
                            case 1: self.easyScores = userScoresResponse;
                                break;
                            case 2: self.medScores = userScoresResponse;
                                break;
                            case 3: self.hardScores = userScoresResponse;
                                break;
                            default:
                        }
                    }).fail(function (xhr, status, error) {
                        // deal with error from server (status code 400-599)
                        if (error == ""Not Found"") {
                            self.userNotFound = true;
                        }
                        else {
                            a");
                WriteLiteral(@"lert(""There was an error retrieving scores. Status: "" + status + "", Error: "" + error);
                        }                        
                    });
                },
                getScores: function () {
                    var self = this;
                    self.userNotFound = false;
                    self.getScoresByDifficulty(1);
                    self.getScoresByDifficulty(2);
                    self.getScoresByDifficulty(3);
                },
                isAnyScoreFound: function () {
                    var self = this;
                    return ((self.easyScores.length > 0) || (self.medScores.length > 0) || (self.hardScores.length > 0))
                }
            },
            computed: {
                // CREATE ANY CALCULATED PROPERTIES HERE. THEY BEHAVE LIKE READ-ONLY DATA
            }
        });

    </script>
");
                EndContext();
            }
            );
            BeginContext(5402, 2, true);
            WriteLiteral("\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Simon.Pages.GetMyScoresModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Simon.Pages.GetMyScoresModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Simon.Pages.GetMyScoresModel>)PageContext?.ViewData;
        public Simon.Pages.GetMyScoresModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
